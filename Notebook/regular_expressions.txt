Regular Expressions

* a = re.compile('<some patter>') is used, to create a pattern
* a.search('<some string>') returns a Match object, None otherwise

Regex Symbols
* The ? matches zero or one of the preceding group.
* The * matches zero or more of the preceding group.
* The + matches one or more of the preceding group.
* The {n} matches exactly n of the preceding group.
* The {n,} matches n or more of the preceding group.
* The {,m} matches 0 to m of the preceding group.
* The {n,m} matches at least n and at most m of the preceding group.
* {n,m}? or *? or +? performs a non-greedy match of the preceding group.
* ^shit means the string must begin with shit.
* spam$ means the string must end with spam.
* The . matches any character, except newline characters.
* \d, \w, and \s match a digit, word, or space character, respectively.
* \D, \W, and \S match anything except a digit, word, or space character, respectively.
* [abc] matches any character between the brackets (such as a, b, or c).
* [^abc] matches any character that isn't between the brackets.

N.B. Normally regular expressions match text with the the exact casing one specifies.
N.B. Regular Expressions can also subsitute new text in place of those patterns.
     The sub() method for Regex objects is passed two arguments. The first argument
     is a string to replace any matches. The second is the string for the regular
     expression.
